import pandas as pd
import os
import streamlit as st
import pydeck as pdk
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import requests
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.common.by import By
import time
import json
from fastapi import FastAPI
from pydantic import BaseModel
from datetime import datetime

app = FastAPI()


# Dataset inicial
df = pd.DataFrame({
    'municipio': ['Municipio1', 'Municipio2'],
    'casos_est': [110, 160],
    'casos_est_min': [100, 150],
    'casos_est_max': [120, 170],
    'casos': [100, 150],
    'proba_disse>1': [0.2, 0.5],
    'incid√™ncia_100khab': [50, 75],
    'dissemina√ß√£o': [0.9, 1.0],
    'popula√ß√£o': [10000, 15000],
    'tempmin': [20.0, 22.0],
    'umidmax': [80, 85],
    'umidmed': [70, 75],
    'umidmin': [60, 65],
    'tempmed': [25.0, 26.0],
    'tempmax': [30.0, 32.0],
    'estado': ['Estado1', 'Estado2'],
    'longitude': [-51.9253, -49.9253],
    'latitude': [-14.2350, -12.2350],
    'data_week': ['2024-01-01', '2024-02-01']
})


# Modelo Pydantic para valida√ß√£o de entrada
# Modelo para incluir todas as colunas
class Item(BaseModel):
    municipio: str
    casos_est: int
    casos_est_min: int
    casos_est_max: int
    casos: int
    proba_disse: float
    incid√™ncia_100khab: float
    dissemina√ß√£o: float
    popula√ß√£o: int
    tempmin: float
    umidmax: int
    umidmed: int
    umidmin: int
    tempmed: float
    tempmax: float
    estado: str
    longitude: float
    latitude: float
    data_week: str

# Read (leitura de um munic√≠pio espec√≠fico)
@app.get('/items/{municipio}')
def read_item(municipio: str):
    global df
    result = df[df['municipio'] == municipio]
    if not result.empty:
        return result.to_dict(orient='records')[0]
    return {"error": "Item n√£o encontrado"}

# Create (cria√ß√£o de novos registros)
@app.post('/items')
def create_item(item: Item):
    global df
    new_row = pd.DataFrame([item.dict()])
    df = pd.concat([df, new_row], ignore_index=True)
    return df.to_dict(orient='records')

# Delete (remo√ß√£o de registros)
@app.delete('/items/{municipio}')
def delete_item(municipio: str):
    global df
    df = df[df['municipio'] != municipio]
    return df.to_dict(orient='records')

# Update (atualiza√ß√£o de registros)
@app.put('/items/{municipio}')
def update_item(municipio: str, new_item: Item):
    global df
    df.loc[df['municipio'] == municipio, df.columns] = new_item.dict().values()
    return df[df['municipio'] == municipio].to_dict(orient='records')[0]

# Configura√ß√£o da p√°gina
st.set_page_config(page_title='Monitoramento de Doen√ßas no Brasil', page_icon='ü¶ü', layout='wide')
st.markdown(f'''<style>.stApp {{background-color: #212325;}}</style>''', unsafe_allow_html=True)

diase = st.sidebar.selectbox(
    'Escolha a doen√ßa',[ 'Dengues', 'Gripes - Op√ß√£o em desenvolvimento'])

if diase == 'Gripes':

    # T√≠tulo do Dashboard
    st.title("Monitoramento Epidemiol√≥gico de Gripes - Brasil")
    
    
    
    # # Fun√ß√£o para carregar CSVs
    # @st.cache_data
    # def carregar_dados():
    #     df_municipios = pd.read_csv('data_sus/infogripe-master/Dados/InfoGripe/base_territorial/tabela_municipio_macsaud.csv')
    #     df_serie_temporal = pd.read_csv('data_sus/infogripe-master/Dados/InfoGripe/base_territorial/serie_temporal_com_estimativas_recentes.csv', sep=';')
    #     df_serie_sem_filtro = pd.read_csv('data_sus/infogripe-master/Dados/InfoGripe/base_territorial/dados_semanais_faixa_etaria_sexo_virus_sem_filtro_sintomas.csv', sep=';')
    #     df_territorios = pd.read_csv('data_sus/infogripe-master/Dados/InfoGripe/base_territorial/tabela_municipio_macsaud.csv')
    #     df_dados_virus = pd.read_csv('data_sus/infogripe-master/Dados/InfoGripe/base_territorial/dados_semanais_faixa_etaria_sexo_virus.csv', sep=';')
    #     df_virus_sem_filtro = pd.read_csv('data_sus/infogripe-master/Dados/InfoGripe/base_territorial/dados_semanais_faixa_etaria_sexo_virus_sem_filtro_sintomas.csv', sep=';')
        
    #     return df_municipios, df_serie_temporal, df_serie_sem_filtro, df_territorios, df_dados_virus, df_virus_sem_filtro

    # # Carregar os dados
    # df_municipios, df_serie_temporal, df_serie_sem_filtro, df_territorios, df_dados_virus, df_virus_sem_filtro = carregar_dados()

    # # Barra lateral com filtros
    # st.sidebar.header('Filtros')
    # uf_selecionada = st.sidebar.selectbox('Selecione a UF', df_serie_temporal['Unidade da Federa√ß√£o'].unique())
    # ano_epidemiologico = st.sidebar.selectbox('Selecione o Ano Epidemiol√≥gico', df_serie_temporal['Ano epidemiol√≥gico'].unique())
    # semana_epidemiologica = st.sidebar.selectbox('Selecione a Semana Epidemiol√≥gica', df_serie_temporal['Semana epidemiol√≥gica'].unique())

    # # Filtro por faixa et√°ria e sexo
    # sexo = st.sidebar.selectbox('Sexo', df_dados_virus['sexo'].unique())
    # faixa_etaria = st.sidebar.multiselect('Faixa Et√°ria', ['< 2 anos', '0-4 anos', '5-9 anos', '10-19 anos', '20-29 anos', '30-39 anos', '40-49 anos', '50-59 anos', '60+ anos'])

    # # Filtrando os dados
    # df_filtrado = df_serie_temporal[(df_serie_temporal['Unidade da Federa√ß√£o'] == uf_selecionada) & 
    #                                 (df_serie_temporal['Ano epidemiol√≥gico'] == ano_epidemiologico) & 
    #                                 (df_serie_temporal['Semana epidemiol√≥gica'] == semana_epidemiologica)]

    # # Exibi√ß√£o dos dados filtrados
    # st.write("Dados Filtrados:")
    # st.dataframe(df_filtrado)

    
    # # Gr√°fico de casos ao longo do tempo
    # fig_casos = px.line(df_filtrado, x='Semana epidemiol√≥gica', y='Casos semanais reportados at√© a √∫ltima atualiza√ß√£o', title='Casos Semanais Reportados')
    # st.plotly_chart(fig_casos)

    # # Mapas interativos
    # st.write("Mapa Interativo:")
    # fig_mapa = px.scatter_mapbox(df_municipios, lat="latitude", lon="longitude", hover_name="municipio",
    #                             hover_data=["Populacao", "DS_NOMEPAD_macsaud"],
    #                             color_discrete_sequence=["fuchsia"], zoom=3, height=400)
    # fig_mapa.update_layout(mapbox_style="open-street-map")
    # fig_mapa.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
    # st.plotly_chart(fig_mapa)

    # # Compara√ß√£o de casos entre diferentes per√≠odos
    # st.write("Compara√ß√£o de Casos entre Per√≠odos:")
    # periodo1 = st.sidebar.selectbox('Selecione o Primeiro Per√≠odo', df_serie_temporal['Semana epidemiol√≥gica'].unique(), key='p1')
    # periodo2 = st.sidebar.selectbox('Selecione o Segundo Per√≠odo', df_serie_temporal['Semana epidemiol√≥gica'].unique(), key='p2')

    # df_comparacao = df_serie_temporal[df_serie_temporal['Semana epidemiol√≥gica'].isin([periodo1, periodo2])]
    # fig_comparacao = px.bar(df_comparacao, x='Semana epidemiol√≥gica', y='Casos semanais reportados at√© a √∫ltima atualiza√ß√£o', color='Semana epidemiol√≥gica',
    #                         barmode='group', title='Compara√ß√£o de Casos entre Per√≠odos')
    # st.plotly_chart(fig_comparacao)
    
    

    # # Fun√ß√£o para carregar os datasets
    # @st.cache_data
    # def load_data(file_path):
    #     return pd.read_csv(file_path)

    # # Carregar os dados
    # estados_estimativas_fx_etaria = load_data('data_sus\infogripe-master\Dados\InfoGripe\estados_serie_estimativas_fx_etaria_sem_filtro_febre.csv')
    # capitais_tendencia = load_data('data_sus/infogripe-master/Dados/InfoGripe/capitais_serie_estimativas_tendencia_sem_filtro_febre.csv')
    # casos_semanais_virus = load_data('data_sus/infogripe-master/Dados/InfoGripe/casos_semanais_fx_etaria_virus_sem_filtro_febre.csv')
    # obitos_virus = load_data('data_sus/infogripe-master/Dados/InfoGripe/obitos_semanais_fx_etaria_virus_sem_filtro_febre.csv')

    # # Sidebar para Filtros
    # st.sidebar.header("Filtros")
    # selected_state = st.sidebar.selectbox("Selecione o Estado", estados_estimativas_fx_etaria["DS_UF_SIGLA"].unique())
    # selected_epiweek = st.sidebar.slider("Semana Epidemiol√≥gica", min_value=int(estados_estimativas_fx_etaria['epiweek'].min()), 
    #                                     max_value=int(estados_estimativas_fx_etaria['epiweek'].max()), value=(1, 52))

    # # Filtrando os dados com base nos filtros escolhidos
    # filtered_data = estados_estimativas_fx_etaria[
    #     (estados_estimativas_fx_etaria["DS_UF_SIGLA"] == selected_state) & 
    #     (estados_estimativas_fx_etaria["epiweek"].between(selected_epiweek[0], selected_epiweek[1]))
    # ]

    # # Exibir uma tabela com os dados filtrados
    # st.subheader("Dados Filtrados")
    # st.dataframe(filtered_data)

    # # Gr√°fico de Tend√™ncias (Plotly)
    # st.subheader("Tend√™ncia de Casos Estimados")
    # fig = px.line(
    #     filtered_data,
    #     x='epiweek',
    #     y='mediana_da_estimativa',
    #     labels={'mediana_da_estimativa': 'Casos Estimados'},
    #     title=f"Tend√™ncia de Casos no Estado {selected_state}"
    # )
    # st.plotly_chart(fig)

    # # Gr√°fico de Barras para Distribui√ß√£o por Faixa Et√°ria
    # st.subheader("Distribui√ß√£o de Casos por Faixa Et√°ria")
    # fig_fx = px.bar(
    #     filtered_data,
    #     x='fx_etaria',
    #     y='casos_notificados',
    #     title="Casos Notificados por Faixa Et√°ria",
    #     labels={'fx_etaria': 'Faixa Et√°ria', 'casos_notificados': 'Casos Notificados'}
    # )
    # st.plotly_chart(fig_fx)

    # # Mapa Interativo com Pydeck
    # st.subheader("Mapa de Distribui√ß√£o de Casos")
    # st.map(filtered_data[['latitude', 'longitude']]) 

    # # Exibir M√©tricas de Casos e √ìbitos
    # st.subheader("M√©tricas de Casos e √ìbitos")
    # total_cases = filtered_data["casos_notificados"].sum()
    # st.metric(label="Total de Casos Notificados", value=total_cases)

    # total_deaths = obitos_virus[(obitos_virus['SG_UF_NOT'] == selected_state)]['SRAG'].sum()
    # st.metric(label="Total de √ìbitos por SRAG", value=total_deaths)

    # # Abas para Visualizar diferentes aspectos
    # tab1, tab2, tab3 = st.tabs(["Estimativas por Estado", "Tend√™ncias de Capitais", "Casos e √ìbitos por Faixa Et√°ria"])

    # # Aba 1 - Estimativas por Estado
    # with tab1:
    #     st.write("Dados de Estimativas por Estado")
    #     st.dataframe(filtered_data)

    # # Aba 2 - Tend√™ncias de Capitais
    # with tab2:
    #     st.write("Dados de Tend√™ncia de Capitais")
    #     st.dataframe(capitais_tendencia)

    # # Aba 3 - Casos e √ìbitos por Faixa Et√°ria
    # with tab3:
    #     st.write("Dados de Casos e √ìbitos por Faixa Et√°ria")
    #     st.dataframe(casos_semanais_virus)

    # # Filtros por Datas
    # st.sidebar.date_input("Selecione a Data", [])



if diase == 'Dengues':
    
    # Fun√ß√µes para interagir com FastAPI
    def get_item(municipio):
        response = requests.get(f"http://127.0.0.1:8000/items/{municipio}")
        return response.json()

    def create_item(item):
        response = requests.post("http://127.0.0.1:8000/items", json=item)
        return response.json()

    def update_item(municipio, item):
        response = requests.put(f"http://127.0.0.1:8000/items/{municipio}", json=item)
        return response.json()

    def delete_item(municipio):
        response = requests.delete(f"http://127.0.0.1:8000/items/{municipio}")
        return response.json()

        
    # Fun√ß√£o para carregar o dataset com cache
    @st.cache_data
    def carregar_dataset():
        try:
            df = pd.read_csv('data_sus/df_dengue_2023_2024.csv')
        except FileNotFoundError:
            st.error("Arquivo n√£o encontrado.")
            df = pd.DataFrame()  # Retorna um DataFrame vazio em caso de erro
        return df

    # Fun√ß√£o para definir a cor com base no √≠ndice de risco
    def definir_cor(risco):
        if risco > 7:
            return [255, 0, 0, 160]  # Vermelho (risco alto)
        elif 1 < risco <= 6.99:
            return [255, 255, 0, 160]  # Amarelo (risco moderado)
        else:
            return [0, 255, 0, 160]  # Verde (risco baixo)

    # Fun√ß√£o para plotar o mapa interativo
    def plotar_mapa(df):
        layer = pdk.Layer(
            'ScatterplotLayer',
            data=df,
            get_position='[longitude, latitude]',
            get_radius='3000',
            get_fill_color='cor',
            pickable=True,
            auto_highlight=True,
        )
        view_state = pdk.ViewState(
            latitude=df['latitude'].mean(),
            longitude=df['longitude'].mean(),
            zoom=6
        )
        r = pdk.Deck(layers=[layer], initial_view_state=view_state, tooltip={
            'html': '<b>Munic√≠pio:</b> {municipio}<br><b>Casos:</b> {casos}<br><b>Est. Casos:</b> {casos_est}<br><b>Dissemina√ß√£o:</b> {dissemina√ß√£o}<br><b>Temperatura:</b> {tempmed}¬∞C<br><b>Umidade:</b> {umidmed}%',
            'style': {'color': 'white'}
        })
        st.pydeck_chart(r)

    # Fun√ß√£o para plotar gr√°ficos interativos
    def plotar_graficos(df_municipio, df_min_max, municipio_usuario, estado_usuario):
        fig = go.Figure()
        # Adiciona a linha do munic√≠pio selecionado
        fig.add_trace(go.Scatter(x=df_municipio['data_week'], y=df_municipio['casos'],
                                mode='lines+markers', name=f'{municipio_usuario} - Casos', line=dict(color='red', width=4)))
        # Linha dos casos m√≠nimos do estado
        fig.add_trace(go.Scatter(x=df_min_max['data_week'], y=df_min_max[('casos', 'min')],
                                mode='lines', name='Casos M√≠nimos (Estado)', line=dict(color='green', dash='dash')))
        # Linha dos casos m√°ximos do estado
        fig.add_trace(go.Scatter(x=df_min_max['data_week'], y=df_min_max[('casos', 'max')],
                                mode='lines', name='Casos M√°ximos (Estado)', line=dict(color='blue', dash='dash')))
        # Configura√ß√µes do layout
        fig.update_layout(title=f'Compara√ß√£o de Incid√™ncia de Casos {estado_usuario}', xaxis_title='Semana',
                        yaxis_title='N√∫mero de Casos', legend_title='Munic√≠pios')
        st.plotly_chart(fig)


        # Gr√°fico de linha para Temperatura M√©dia (tempmed)
        fig_tempmed = go.Figure()

        # Adicionar a linha do munic√≠pio selecionado
        fig_tempmed.add_trace(go.Scatter(x=df_municipio_selecionado['data_week'], y=df_municipio_selecionado['tempmed'],
                                        mode='lines+markers', name=f'{municipio_usuario} - Temperatura M√©dia', line=dict(color='red', width=4)))

        # Adicionar a linha da temperatura m√≠nima do estado
        fig_tempmed.add_trace(go.Scatter(x=df_min_max['data_week'], y=df_min_max[('tempmin', 'min')],
                                        mode='lines', name='Temperatura M√≠nima (Estado)', line=dict(color='green', dash='dash')))

        # Adicionar a linha da temperatura m√°xima do estado
        fig_tempmed.add_trace(go.Scatter(x=df_min_max['data_week'], y=df_min_max[('tempmax', 'max')],
                                        mode='lines', name='Temperatura M√°xima (Estado)', line=dict(color='blue', dash='dash')))

        # Adicionar t√≠tulo e r√≥tulos
        fig_tempmed.update_layout(title=f'Compara√ß√£o de Temperatura M√©dia no Estado {estado_usuario}',
                                xaxis_title='Semana',
                                yaxis_title='Temperatura M√©dia (¬∞C)',
                                legend_title='Munic√≠pios')

        st.plotly_chart(fig_tempmed)


        # Gr√°fico de linha para Umidade M√©dia (umidmed)
        fig_umidmed = go.Figure()

        # Adicionar a linha do munic√≠pio selecionado
        fig_umidmed.add_trace(go.Scatter(x=df_municipio_selecionado['data_week'], y=df_municipio_selecionado['umidmed'],
                                        mode='lines+markers', name=f'{municipio_usuario} - Umidade M√©dia', line=dict(color='red', width=4)))

        # Adicionar a linha da umidade m√≠nima do estado
        fig_umidmed.add_trace(go.Scatter(x=df_min_max['data_week'], y=df_min_max[('umidmin', 'min')],
                                        mode='lines', name='Umidade M√≠nima (Estado)', line=dict(color='green', dash='dash')))

        # Adicionar a linha da umidade m√°xima do estado
        fig_umidmed.add_trace(go.Scatter(x=df_min_max['data_week'], y=df_min_max[('umidmax', 'max')],
                                        mode='lines', name='Umidade M√°xima (Estado)', line=dict(color='blue', dash='dash')))

        # Adicionar t√≠tulo e r√≥tulos
        fig_umidmed.update_layout(title=f'Compara√ß√£o de Umidade M√©dia no Estado {estado_usuario}',
                                xaxis_title='Semana',
                                yaxis_title='Umidade M√©dia (%)',
                                legend_title='Munic√≠pios')

        st.plotly_chart(fig_umidmed)


        # Gr√°fico de linha para Dissemina√ß√£o (dissemina√ß√£o)
        fig_disseminacao = go.Figure()

        # Adicionar a linha do munic√≠pio selecionado
        fig_disseminacao.add_trace(go.Scatter(x=df_municipio_selecionado['data_week'], y=df_municipio_selecionado['dissemina√ß√£o'],
                                            mode='lines+markers', name=f'{municipio_usuario} - Dissemina√ß√£o', line=dict(color='red', width=4)))

        # Adicionar a linha da dissemina√ß√£o m√≠nima do estado
        fig_disseminacao.add_trace(go.Scatter(x=df_min_max['data_week'], y=df_min_max[('dissemina√ß√£o', 'min')],
                                            mode='lines', name='Dissemina√ß√£o M√≠nima (Estado)', line=dict(color='green', dash='dash')))

        # Adicionar a linha da dissemina√ß√£o m√°xima do estado
        fig_disseminacao.add_trace(go.Scatter(x=df_min_max['data_week'], y=df_min_max[('dissemina√ß√£o', 'max')],
                                            mode='lines', name='Dissemina√ß√£o M√°xima (Estado)', line=dict(color='blue', dash='dash')))

        # Adicionar t√≠tulo e r√≥tulos
        fig_disseminacao.update_layout(title=f'Compara√ß√£o de Dissemina√ß√£o no Estado {estado_usuario}',
                                    xaxis_title='Semana',
                                    yaxis_title='Dissemina√ß√£o',
                                    legend_title='Munic√≠pios')

        st.plotly_chart(fig_disseminacao)



    # Configura√ß√µes para o Selenium com Firefox
    def setup_selenium():
        options = Options()
        options.headless = True 
        driver = webdriver.Firefox(options=options)
        return driver

    # Fun√ß√£o para filtrar not√≠cias relacionadas √† dengue
    def is_dengue_related(title, description):
        keywords = ['dengue', 'zika', 'chikungunya', 'mosquito']
        return any(keyword.lower() in title.lower() or keyword.lower() in description.lower() for keyword in keywords)

    # Fun√ß√£o para organizar visualiza√ß√£o das not√≠cias
    def show_news_column(news_data, column_title):
        with st.expander(column_title):
            for news in news_data:
                st.markdown(f"**[{news['title']}]({news['link']})**")
                st.write(news['date'])
                st.write(news['description'])


    # Fun√ß√£o para fazer scraping da p√°gina
    def scrape_dengue_info():
        driver = setup_selenium()
        url = 'https://www.gov.br/saude/pt-br/assuntos/saude-de-a-a-z/d/dengue'
        
        # Acessar a p√°gina
        driver.get(url)
        
        # Esperar que a p√°gina carregue completamente
        time.sleep(5)  # Ajuste esse tempo de espera conforme necess√°rio

        # Encontrar todos os par√°grafos com informa√ß√µes
        paragraphs = driver.find_elements(By.TAG_NAME, 'p')
        
        # Extrair o texto e armazenar em uma lista
        dengue_info = [p.text for p in paragraphs]
        
        # Fechar o driver
        driver.quit()
        
        # Retornar as informa√ß√µes coletadas
        return dengue_info

    # Fun√ß√£o para fazer scraping da CNN (not√≠cias gerais)
    def scrape_cnn_news():
        driver = setup_selenium()
        url = 'https://www.cnnbrasil.com.br/tudo-sobre/dengue/'
        driver.get(url)
        time.sleep(5)  # Ajuste esse tempo de espera conforme necess√°rio
        
        news_elements = driver.find_elements(By.CLASS_NAME, 'home__list__item')
        news_data = []
        for element in news_elements:
            title = element.find_element(By.TAG_NAME, 'h3').text
            link = element.find_element(By.TAG_NAME, 'a').get_attribute('href')
            date = element.find_element(By.CLASS_NAME, 'home__title__date').text
            description = element.find_element(By.TAG_NAME, 'a').get_attribute('title')
            if is_dengue_related(title, description):
                news_data.append({'title': title, 'link': link, 'date': date, 'description': description})
        
        driver.quit()
        return news_data

    # Fun√ß√£o para fazer scraping das not√≠cias do estado e munic√≠pio (G1)
    def scrape_g1_news(state, city=None):
        driver = setup_selenium()
        search_query = f"dengue {state}" + (f" {city}" if city else "")
        url = f"https://g1.globo.com/busca/?q={search_query}"
        driver.get(url)
        time.sleep(5)
        
        news_elements = driver.find_elements(By.CLASS_NAME, 'widget--info')
        news_data = []
        for element in news_elements:
            title = element.find_element(By.CLASS_NAME, 'widget--info__title').text
            link = element.find_element(By.TAG_NAME, 'a').get_attribute('href')
            description = element.find_element(By.CLASS_NAME, 'widget--info__description').text
            date = element.find_element(By.CLASS_NAME, 'widget--info__meta').text
            if is_dengue_related(title, description):
                news_data.append({'title': title, 'link': link, 'date': date, 'description': description})
        
        driver.quit()
        return news_data

    # Fun√ß√£o para exibir as not√≠cias no Streamlit
    def display_news(news, title):
        st.write(f"### {title}")
        for item in news:
            st.write(f"**{item['title']}**")
            st.write(f"[Link]({item['link']})")
            st.write(f"*Publicado em: {item['date']}*")
            st.write("---")
    # Carregar o dataset
    df = carregar_dataset()

    # Se o dataset foi carregado corretamente
    if not df.empty:
        # Aba de sele√ß√£o de funcionalidades
        abas = st.tabs(["An√°lise por Munic√≠pio", "Informa√ß√µes e Not√≠cias", "Dados Epidemiol√≥gicos", "API - Op√ß√£o em desenvolvimento"])

        # Aba 1: An√°lise por Munic√≠pio
        with abas[0]:
            st.title("ü¶üAn√°lise da Situa√ß√£o do Munic√≠pio - Dengueü¶ü")
            
            # Convers√£o e tratamento dos dados
            df['data_week'] = pd.to_datetime(df['data_week'], errors='coerce')
            municipio_usuario = st.selectbox("Selecione seu munic√≠pio", sorted(df['municipio'].unique()))
            estado_usuario = df[df['municipio'] == municipio_usuario]['estado'].values[0]
            df_estado = df[df['estado'] == estado_usuario]
            data_maxima = df_estado['data_week'].max()
            filtro_periodo = st.radio("Filtrar por", ('√öltimo M√™s', '√öltimo Ano'))
            
            # Definir o per√≠odo de filtragem
            data_inicial = data_maxima - pd.DateOffset(months=1) if filtro_periodo == '√öltimo M√™s' else data_maxima - pd.DateOffset(years=1)
            df_filtrado = df_estado[(df_estado['data_week'] >= data_inicial) & (df_estado['data_week'] <= data_maxima)].copy()

            
            # Calcular risco e aplicar cor
            df_filtrado.loc[:, 'risco_dengue'] = df_filtrado['casos_est'] * 0.1 + df_filtrado['casos'] * 0.3 + df_filtrado['incid√™ncia_100khab'] * 0.1 + df_filtrado['dissemina√ß√£o'] * 5
            df_filtrado.loc[:, 'cor'] = df_filtrado['risco_dengue'].apply(definir_cor)
            
            # Mostrar mapa interativo
            st.write("O mapa corresponde √† op√ß√£o de um m√™s.")
            plotar_mapa(df_filtrado)
            
            # Criar e exibir gr√°ficos
            df_min_max = df_filtrado.groupby('data_week').agg({
                'casos': ['min', 'max'],
                'incid√™ncia_100khab': ['min', 'max'],
                'dissemina√ß√£o': ['min', 'max'],
                'umidmed': ['min', 'max'],
                'umidmin': ['min', 'max'],
                'umidmax': ['min', 'max'],
                'tempmed': ['min', 'max'],
                'tempmin': ['min', 'max'],
                'tempmax': ['min', 'max']
            }).reset_index()

            df_municipio_selecionado = df_filtrado[df_filtrado['municipio'] == municipio_usuario]
            plotar_graficos(df_municipio_selecionado, df_min_max, municipio_usuario, estado_usuario)

        # Aba 2: Informa√ß√µes e Sintomas
        with abas[1]:

            # Exibir as not√≠cias no Streamlit
            st.title("üîçNot√≠cias e informa√ß√µes sobre Dengueüîç")

            # Infoma√ß√£o
            if st.button("Informa√ß√µes sobre Dengue"):
                try:
                    informacoes = scrape_dengue_info()
                    
                    # Exibir as informa√ß√µes no Streamlit
                    for info in informacoes:
                        st.write(info)
            
                except Exception as e:
                    st.error(f"Erro ao carregar informa√ß√µes: {e}") 
                        

            # CNN: Not√≠cias gerais
            if st.button("Carregar not√≠cias gerais"):
                try:
                    cnn_news = scrape_cnn_news()
                    if cnn_news:
                        show_news_column(cnn_news, "Not√≠cias Gerais")
                    else:
                        st.write("Nenhuma not√≠cia encontrada.")
                except Exception as e:
                    st.error(f"Erro ao carregar not√≠cias gerais: {e}")



            if st.button("Carregar not√≠cias por estado e munic√≠pio"):
                try:
                    state_news = scrape_g1_news(estado_usuario)
                    city_news = scrape_g1_news(estado_usuario, municipio_usuario) if municipio_usuario else []
                    
                    if state_news:
                        show_news_column(state_news, f"Not√≠cias no estado: {estado_usuario}")
                    else:
                        st.write(f"Nenhuma not√≠cia encontrada para o estado {estado_usuario}.")
                    
                    if city_news:
                        show_news_column(city_news, f"Not√≠cias no munic√≠pio: {municipio_usuario}")
                    elif municipio_usuario:
                        st.write(f"Nenhuma not√≠cia encontrada para o munic√≠pio {municipio_usuario}.")
                
                except Exception as e:
                    st.error(f"Erro ao carregar not√≠cias do estado ou munic√≠pio: {e}")


        # Aba 3: Dados Epidemiol√≥gicos
        with abas[2]:
            
            st.title(f"üìäDados Epidemiol√≥gicosüìä")
            # Incorporar o Power BI no Streamlit
            st.components.v1.iframe("https://app.powerbi.com/view?r=eyJrIjoiYzQyOTI4M2ItZTQwMC00ODg4LWJiNTQtODc5MzljNWIzYzg3IiwidCI6IjlhNTU0YWQzLWI1MmItNDg2Mi1hMzZmLTg0ZDg5MWU1YzcwNSJ9&pageName=ReportSectionbd7616200acb303571fc", height=600)


            st.write('Here you need upload the csv with data from 2010 to 2024. \nHas customizable graphics and an interactive map. \n Google Drive Data link: https://drive.google.com/drive/folders/19OGg_d3S9L6wc99I3FZxc5Mn9Ba-jXos?usp=drive_link \n DropBox Data Link: https://www.dropbox.com/scl/fo/wuwb1zpcxuvvlnyfrkcpf/AIBXL31_YW6QpjbWKyG-v2s?rlkey=8vzsj4lddvx5sh61ce8hl2df1&st=zvb71bzb&dl=0')

            uploaded_file = st.file_uploader('Fa√ßa o upload do arquivo da regi√£o desejada.')
            if uploaded_file:
                @st.cache_data
                def load_data(uploaded_file):
                    df = pd.read_csv(uploaded_file)
                    return df
                
                df = load_data(uploaded_file)       
                st.write('Dados carregados com sucesso!')

                # Certifique-se de que a coluna 'estado' seja do tipo string e remova valores nulos
                df['estado'] = df['estado'].astype(str)
                df = df[df['estado'].notna()]
            
                # Multiselect para selecionar as colunas desajas
                selected_columns = st.multiselect("Selecione as colunas. :)", df.columns.tolist(), default=df.columns.tolist())

                # Multiselect para selecionar os estados, ordenados alfabeticamente
                selected_estado = st.multiselect(" Selecione os estados.", sorted(df['estado'].astype(str).unique()))
                df_filtrado = df[(df['estado'].isin(selected_estado))]

                # Multiselect para selecionar os munic√≠pios, ordenados alfabeticamente
                selected_municipio = st.multiselect("Selecione os munic√≠pios.", sorted(df_filtrado['municipio'].astype(str).unique()), default=sorted(df_filtrado['municipio'].astype(str).unique()))
                df_filtrado = df_filtrado[(df_filtrado['municipio'].isin(selected_municipio))]
                st.write('Dados filtrados:')
                st.write(len(df_filtrado), ' Registros')
                st.dataframe(df_filtrado[selected_columns])


                def convert_df(df):
                    return df.to_csv().encode('utf-8')

                csv = convert_df(df_filtrado)
                # Baixar csv
                st.download_button(
                    label='Baixar dados filtrados',
                    data=csv,
                    file_name='dados_filtrados.csv',
                    mime='text/csv',
                )

                if selected_municipio:
                    # Converter a coluna para o tipo datetime
                    df_filtrado['data_week'] = pd.to_datetime(df_filtrado['data_week'])

                    # Selecionar o intervalo de datas para visualiza√ß√£o
                    data_inicial = st.date_input('Data inicial', value=df_filtrado['data_week'].min(), min_value=df_filtrado['data_week'].min(), max_value=df_filtrado['data_week'].max())
                    data_final = st.date_input('Data final', value=df_filtrado['data_week'].max(), min_value=df_filtrado['data_week'].min(), max_value=df_filtrado['data_week'].max())

                    # Filtrar os dados para o intervalo de datas selecionado
                    dados_filtrados = df_filtrado[(df_filtrado['data_week'] >= pd.to_datetime(data_inicial)) & (df_filtrado['data_week'] <= pd.to_datetime(data_final))]

                    # Agrupar os dados por munic√≠pio e somar os casos e a estimativa de casos
                    dados_agrupados = dados_filtrados.groupby(['municipio', 'latitude', 'longitude']).agg(
                        casos=('casos', 'sum'),
                        casos_est=('casos_est', 'sum'),
                        tempmed=('tempmed', 'mean'),  # Somar as temperaturas m√©dias
                        umidmed=('umidmed', 'mean')   # Somar as umidades m√©dias
                    ).reset_index()

                    # Limitar o n√∫mero de casas decimais de tempmed e umidmed
                    dados_agrupados['tempmed'] = dados_agrupados['tempmed'].round(2)
                    dados_agrupados['umidmed'] = dados_agrupados['umidmed'].round(2)

                # Verificar se h√° dados ap√≥s a filtragem
                if selected_municipio:

                    # Criar o mapa interativo
                    layer = pdk.Layer(
                        'ScatterplotLayer',
                        data=dados_agrupados,
                        get_position='[longitude, latitude]',  # Coordenadas corretas
                        get_radius=9000,  # Ajustar o tamanho dos pontos
                        get_fill_color='[255, 0, 0, 160]',  # Vermelho transl√∫cido
                        pickable=True
                    )

                    view_state = pdk.ViewState(
                        latitude=-15.7801,  # Posi√ß√£o central do Brasil
                        longitude=-47.9292,
                        zoom=4,
                        pitch=50
                    )

                    r = pdk.Deck(
                        layers=[layer],
                        initial_view_state=view_state,
                        tooltip={"text": "{municipio} Casos: {casos} Estimativa: {casos_est} Temp: {tempmed} nUmidade: {umidmed} %"}
                    )

                    st.pydeck_chart(r)


                    # Evolu√ß√£o dos casos ao longo do tempo
                    fig = px.line(dados_filtrados, x='data_week', y='casos', color='municipio', title='Evolu√ß√£o dos casos ao longo do tempo')
                    st.plotly_chart(fig)

                    # Temperatura ao longo do tempo
                    fig = px.line(dados_filtrados, x='data_week', y='tempmed', color='municipio', title='Temperatura ao longo do tempo')
                    st.plotly_chart(fig)
                    
                    # √ömidade ao longo do tempo
                    fig = px.line(dados_filtrados, x='data_week', y='umidmed', color='municipio', title='√ömidade ao longo do tempo')
                    st.plotly_chart(fig)
                
                
                if selected_municipio:   
                    # Seletor de colunas
                    colunas = dados_filtrados.columns.tolist()

                    # Gr√°fico de barras
                    st.subheader('Gr√°fico de Barras')
                    x_col_barra = st.selectbox('Para o eixo X indico selecionar data, municipios ou estados', colunas, key='x_barra')
                    y_col_barra = st.selectbox('Para o eixo Y indico selecionar uma coluna num√©rica ', colunas, key='y_barra')

                    if x_col_barra and y_col_barra:
                        grafico_barra = px.bar(dados_filtrados, x=x_col_barra, y=y_col_barra, title=f'Gr√°fico de Barras: {x_col_barra} vs {y_col_barra}')
                        st.plotly_chart(grafico_barra)


                    # Gr√°fico de pizza 
                    st.subheader('Gr√°fico de Pizza')
                    pie_col = st.selectbox('Selecione a coluna para os valores, indico selecionar uma coluna num√©rica', colunas, key='pie')
                    pie_col_names = st.selectbox('Selecione a coluna para os nomes como data, municipios ou estados', colunas, key='pie_names')

                    if pie_col and pie_col_names:
                        grafico_pizza = px.pie(dados_filtrados, values=pie_col, names=pie_col_names, title=f'Gr√°fico de Pizza: {pie_col_names} - {pie_col}')
                        st.plotly_chart(grafico_pizza)
                        

                    # Histograma
                    st.subheader('Histograma')
                    x_col_histo = st.selectbox('Selecione o eixo x, indico selecionar uma coluna categ√≥rica', colunas, key='x_histo')
                    y_col_histo = st.selectbox('Selecione o eixo Y, indico selecionar uma coluna num√©rica', colunas, key='y_histo')
                    grafico_histograma = px.histogram(dados_filtrados, x=x_col_histo, y=y_col_histo, nbins=200, )
                    st.plotly_chart(grafico_histograma)

            else:
                st.write('Nenhum arquivo foi carregado.')

        #API
        with abas[3]:
            # Streamlit UI
            st.title("Gerenciar Dados de Dengue com FastAPI")

            # Entrada de dados
            municipio = st.text_input("Digite o nome do munic√≠pio")

            # Buscar dados do munic√≠pio
            if st.button("Buscar Munic√≠pio"):
                item = get_item(municipio)
                st.write(item)

            # Adicionar novo munic√≠pio
            st.subheader("Adicionar novo munic√≠pio")
            new_municipio = st.text_input("Nome do novo munic√≠pio")
            casos_est = st.number_input("Estimativa de casos", min_value=0)
            casos_est_min = st.number_input("M√≠nimo de estimativa de casos", min_value=0)
            casos_est_max = st.number_input("M√°ximo de estimativa de casos", min_value=0)
            casos = st.number_input("N√∫mero de casos", min_value=0)
            proba_disse = st.number_input("Probabilidade de dissemina√ß√£o > 1", min_value=0.0)
            incid√™ncia_100khab = st.number_input("Incid√™ncia por 100k habitantes", min_value=0.0)
            dissemina√ß√£o = st.number_input("Dissemina√ß√£o", min_value=0.0)
            popula√ß√£o = st.number_input("Popula√ß√£o", min_value=0)
            tempmin = st.number_input("Temperatura m√≠nima", min_value=0.0)
            umidmax = st.number_input("Umidade m√°xima", min_value=0)
            umidmed = st.number_input("Umidade m√©dia", min_value=0)
            umidmin = st.number_input("Umidade m√≠nima", min_value=0)
            tempmed = st.number_input("Temperatura m√©dia", min_value=0.0)
            tempmax = st.number_input("Temperatura m√°xima", min_value=0.0)
            estado = st.text_input("Estado")
            longitude = st.number_input("Longitude", format="%.5f")
            latitude = st.number_input("Latitude", format="%.5f")
            data_week = st.date_input("Data da semana")

            # Bot√£o para adicionar
            if st.button("Adicionar"):
                item = {
                    "municipio": new_municipio,
                    "casos_est": casos_est,
                    "casos_est_min": casos_est_min,
                    "casos_est_max": casos_est_max,
                    "casos": casos,
                    "proba_disse": proba_disse,
                    "incid√™ncia_100khab": incid√™ncia_100khab,
                    "dissemina√ß√£o": dissemina√ß√£o,
                    "popula√ß√£o": popula√ß√£o,
                    "tempmin": tempmin,
                    "umidmax": umidmax,
                    "umidmed": umidmed,
                    "umidmin": umidmin,
                    "tempmed": tempmed,
                    "tempmax": tempmax,
                    "estado": estado,
                    "longitude": longitude,
                    "latitude": latitude,
                    "data_week": str(data_week)
                }
                response = create_item(item)
                st.write(response)

            # Atualizar munic√≠pio
            st.subheader("Atualizar dados do munic√≠pio")
            if st.button("Atualizar Munic√≠pio"):
                item = {
                    "municipio": municipio,
                    "casos_est": casos_est,
                    "casos_est_min": casos_est_min,
                    "casos_est_max": casos_est_max,
                    "casos": casos,
                    "proba_disse": proba_disse,
                    "incid√™ncia_100khab": incid√™ncia_100khab,
                    "dissemina√ß√£o": dissemina√ß√£o,
                    "popula√ß√£o": popula√ß√£o,
                    "tempmin": tempmin,
                    "umidmax": umidmax,
                    "umidmed": umidmed,
                    "umidmin": umidmin,
                    "tempmed": tempmed,
                    "tempmax": tempmax,
                    "estado": estado,
                    "longitude": longitude,
                    "latitude": latitude,
                    "data_week": str(data_week)
                }
                response = update_item(municipio, item)
                st.write(response)

            # Deletar munic√≠pio
            if st.button("Deletar Munic√≠pio"):
                response = delete_item(municipio)
                st.write(response)
